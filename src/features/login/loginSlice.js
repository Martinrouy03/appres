import { createSlice } from "@reduxjs/toolkit";
import { createAsyncThunk } from "@reduxjs/toolkit";
import { const_apiurl } from "../../Constant";
import axios from "axios";

const initialState = {
  loading: false,
  user: "",
  error: "",
};

// createAsyncThunk automatically generates pending, fulfilled and rejected action types. The corresponding reducers are not generated by the slice and need to be added as "extrareducers"
export const fetchToken = createAsyncThunk("login/fetchToken", async () => {
  return await axios
    .post(const_apiurl + "login", {
      login: "Martin",
      password: "KarmapaChenn0",
      entity: "",
      reset: 1, // *** The token must be renew
    })
    .then((json) => {
      console.log("loguserSucces : "); //+ JSON.stringify(json.data.success
      let login = {
        code: json.data.success.code,
        token: json.data.success.token,
        username: "Martin",
      };
      return login;
    });
});

const loginSlice = createSlice({
  name: "login",
  initialState,
  extraReducers: (builder) => {
    builder.addCase(fetchToken.pending, (state) => {
      state.loading = true;
    });
    builder.addCase(fetchToken.fulfilled, (state, action) => {
      state.loading = false;
      state.user = action.payload;
      state.error = "";
    });
    builder.addCase(fetchToken.rejected, (state, action) => {
      state.loading = false;
      state.user = "";
      state.error = action.error.message;
    });
  },
});

export default loginSlice.reducer;
